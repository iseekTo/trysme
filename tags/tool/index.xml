<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tool on wm&#39;s blog</title>
    <link>https://iseekto.github.io/trysme/tags/tool/</link>
    <description>Recent content in tool on wm&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Apr 2020 10:36:02 +0800</lastBuildDate>
    
	<atom:link href="https://iseekto.github.io/trysme/tags/tool/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git Rebase简单使用</title>
      <link>https://iseekto.github.io/trysme/2020/git-rebase%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 15 Apr 2020 10:36:02 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/git-rebase%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>多个commit合成一个并提交远程  git log 选清楚要合并的commit id，从早提交的一个开始算起，到你想合并的commit区间
 git rebase -i master (或者你的commit id 区间)
 此时弹出一个vim交互页面，如果commit过多，则底部输入指令 %s/pick/s/g
 指令解释: 批量替换，将pick字节的改为squash(简写s), g全部 有一个需要改一下，在command处的我们把它给还原即可
  执行完毕如果又出现，successfully updated&amp;hellip; 然后会出现一个无序数字字母组成的分支名
 执行 git checkout -b new branch git add . git commit -m &#39;some msg&#39; git push 可选，多余分支删掉即可。
  去掉上一次的提交 git reset HEAD^ 或者 commitid</description>
    </item>
    
    <item>
      <title>Tree命令</title>
      <link>https://iseekto.github.io/trysme/2020/tree%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 20 Mar 2020 10:49:09 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/tree%E5%91%BD%E4%BB%A4/</guid>
      <description>tree 显示当前全部目录及全部子文件
例如：
├── README.md
├── config
│ ├── env.js
│ ├── getHttpsConfig.js
│ ├── jest
│ │ ├── cssTransform.js
│ │ └── fileTransform.js
│ ├── modules.js
│ ├── paths.js
│ ├── pnpTs.js
│ ├── webpack.config.js
│ └── webpackDevServer.config.js
├── package.json
├── public
│ ├── favicon.ico
│ ├── index.html
│ ├── logo192.png
│ ├── logo512.png
│ ├── manifest.json
│ └── robots.txt
├── scripts
│ ├── build.js
│ ├── start.js
│ └── test.</description>
    </item>
    
    <item>
      <title>Pm2使用</title>
      <link>https://iseekto.github.io/trysme/2020/pm2%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 28 Feb 2020 11:25:01 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/pm2%E4%BD%BF%E7%94%A8/</guid>
      <description>安装: npm i pm2 -g
查看版本：pm2 --version
启动：pm2 start index.js 监听文件启动：pm2 start index.js --watch
查看启动历史：pm2 list
停止：pm2 stop &amp;lt;AppName&amp;gt;/&amp;lt;id&amp;gt;
全部停止： pm2 stop all
删除进程：pm2 delete &amp;lt;id&amp;gt;
 pm2 常用配置
 根目录下，新建空文件 /logs/err.log 和 /logs/out.log 新建配置文件 pm2.conf.json
// pm2.conf.json： { &amp;quot;apps&amp;quot;: { &amp;quot;name&amp;quot;: &amp;quot;pm2-test-server&amp;quot;, // 起个进程名，即AppName &amp;quot;script&amp;quot;: &amp;quot;index.js&amp;quot;, // 启动的入口文件（koa2项目中为/bin/www.js） &amp;quot;watch&amp;quot;: true, // 监听文件变化，自动重启 &amp;quot;ignore_watch&amp;quot;: [ // 不需要监听的文件 &amp;quot;node_modules&amp;quot;, &amp;quot;logs&amp;quot; ], &amp;quot;instances&amp;quot;: 4, // 设置多进程 &amp;quot;error_file&amp;quot;: &amp;quot;logs/err.log&amp;quot;, // 错误日志存储的文件 &amp;quot;out_file&amp;quot;: &amp;quot;logs/out.log&amp;quot;, // console.</description>
    </item>
    
    <item>
      <title>Git冷门指令</title>
      <link>https://iseekto.github.io/trysme/2020/git%E5%86%B7%E9%97%A8%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Thu, 27 Feb 2020 17:08:38 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/git%E5%86%B7%E9%97%A8%E6%8C%87%E4%BB%A4/</guid>
      <description>项目权限问题 对项目进行权限提升，导致没有更改的文件全部变成待提交状态，
在根项目: git config core.filemode false
代码库远程迁移后，修改本地代码关联的远程地址: git remote set-url origin your resp address
复制指定commit号的内容 ✨ git cherry-pick commitID
提交日志图化，是否平行提交 ✨ git log --oneline --graph</description>
    </item>
    
    <item>
      <title>Charles在app中抓包乱码问题的解决</title>
      <link>https://iseekto.github.io/trysme/2020/charles%E5%9C%A8app%E4%B8%AD%E6%8A%93%E5%8C%85%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Thu, 27 Feb 2020 09:47:56 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/charles%E5%9C%A8app%E4%B8%AD%E6%8A%93%E5%8C%85%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</guid>
      <description>Charles在抓取https协议的内容时会出现乱码
解决方案：
1、在菜单栏中找到 Proxy -&amp;gt; SSL Proxying Settings
2、在弹窗框中的 SSL Proxying 选项卡内的 Include 下方点击 Add
3、什么都不填，默认所有域名都可捕获
4、点击 ok 数据就正常显示了~</description>
    </item>
    
    <item>
      <title>Yarn安装项目遇到的难点</title>
      <link>https://iseekto.github.io/trysme/2020/yarn%E5%AE%89%E8%A3%85%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%BE%E7%82%B9/</link>
      <pubDate>Sat, 22 Feb 2020 19:12:57 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/yarn%E5%AE%89%E8%A3%85%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%BE%E7%82%B9/</guid>
      <description>create-react-app创建项目报错（冷门错误） 错误日志：The engine &amp;ldquo;node&amp;rdquo; is incompatible with this module
解决方案：yarn config set ignore-engines true</description>
    </item>
    
    <item>
      <title>Js工具函数</title>
      <link>https://iseekto.github.io/trysme/2020/js%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 21 Feb 2020 14:11:45 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/js%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</guid>
      <description> 快速获取url地址栏的参数(对象格式) const locationParams = location.search.slice(1) locationParams.split(&#39;&amp;amp;&#39;).reduce((acc, params) =&amp;gt; { const [key, value] = params.split(&#39;=&#39;) return { ...acc, [key]: value } }, {})  </description>
    </item>
    
    <item>
      <title>Linux常用命令</title>
      <link>https://iseekto.github.io/trysme/2020/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 16 Feb 2020 17:41:37 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>查看文件及目录下子及的大小 1、最简单的查看方法可以使用 ls -ll、ls-lh命令进行查看，使用 ls -ll，会显示成字节大小; ls- lh会以KB、MB等为单位进行显示，这样比较直观一些。
2、通过命令 du -h –-max-depth=1 *，可以查看当前目录下各文件、文件夹的大小，这个比较实用。
3、查询当前目录总大小可以使用 du -sh。
4、只想查看指定目录的总大小，可以使用 du -sh 目录名称，好用。
端口是否占用 查找系统所示正在使用的端口列表 netstat -lntp
查找监听端口号的进程 PID lsof -i :3000
杀死对应进程 PID, 如 13459 kill -9 13459
防火墙相关 查看防火墙服务有没有运行 firewall-cmd --state
打开/关闭防火墙 systemctl start/stop firewalld
查看防火墙开放的端口 firewall-cmd --list-port
重启防火墙服务使新配置生效 systemctl restart firewalld
目录/可执行文件权限 可执行文件(例如.sh脚本) 赋予脚本可执行权限，终端输入命令：chmod +x t1.sh 回车
执行 ./t1.sh
！设置某目录最高权限 chmod 777 your Catalog
！将当前目录下的所有文件及子目录的文件拥有者权限设置为读、写、可执行 chmod -R 777 *: *： 通配符，指当前目录下的所有文件及目录</description>
    </item>
    
    <item>
      <title>Node资源</title>
      <link>https://iseekto.github.io/trysme/2020/node%E8%B5%84%E6%BA%90/</link>
      <pubDate>Mon, 27 Jan 2020 20:34:10 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/node%E8%B5%84%E6%BA%90/</guid>
      <description>nodejs不同版本的下载
 mac系统的同学建议下载相关版本的 msi
 </description>
    </item>
    
    <item>
      <title>Hugo简单使用</title>
      <link>https://iseekto.github.io/trysme/2020/hugo%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8/</link>
      <pubDate>Wed, 15 Jan 2020 23:37:32 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/hugo%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8/</guid>
      <description>Hugo简单使用流程 注：使用 hugo new posts/...md 之后，需要将 draft: true 这一行删掉。
文章写完后，且绑定github域名；
接着在项目根目录终端输入 hugo 他会在根目录下的 public 文件夹生成我们改动之后的代码
然后就是一波 git add -A, git commit ....
最后就可以在你的github上看效果吧！
 记坑，tags分页下404的问题：需要加上 trysme 作为链接标头 导航需要加入别的路由时可用到此招！
 </description>
    </item>
    
  </channel>
</rss>