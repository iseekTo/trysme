<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>js on wm&#39;s blog</title>
    <link>https://iseekto.github.io/trysme/tags/js/</link>
    <description>Recent content in js on wm&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Feb 2020 14:11:45 +0800</lastBuildDate>
    
	<atom:link href="https://iseekto.github.io/trysme/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Js工具函数</title>
      <link>https://iseekto.github.io/trysme/2020/js%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 21 Feb 2020 14:11:45 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/js%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</guid>
      <description> 快速获取url地址栏的参数(对象格式) const locationParams = location.search.slice(1) locationParams.split(&#39;&amp;amp;&#39;).reduce((acc, params) =&amp;gt; { const [key, value] = params.split(&#39;=&#39;) return { ...acc, [key]: value } }, {})  </description>
    </item>
    
    <item>
      <title>JS原型与闭包系列之——prototype原型</title>
      <link>https://iseekto.github.io/trysme/2020/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97%E4%B9%8Bprototype%E5%8E%9F%E5%9E%8B/</link>
      <pubDate>Mon, 27 Jan 2020 20:41:43 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97%E4%B9%8Bprototype%E5%8E%9F%E5%9E%8B/</guid>
      <description> prototype原型 函数也是一种对象。他也是属性的集合，也可以对函数进行自定义属性。
每个函数都有一个属性叫做prototype。
这个prototype的属性值是一个对象（属性的集合，再次强调！），默认的只有一个叫做constructor的属性，指向这个函数本身。
Fn是一个函数，fn对象是从Fn函数new出来的，这样fn对象就可以调用Fn.prototype中的属性。 因为每个对象都有一个隐藏的属性——“proto”，这个属性引用了创建这个对象的函数的prototype。
即：fn.__proto__ === Fn.prototype
隐式原型 每个对象都有一个proto，可成为隐式原型 proto是一个隐藏的属性，javascript不希望开发者用到这个属性值，有的低版本浏览器甚至不支持这个属性值 instanceof Instanceof的判断队则是：沿着A的proto这条线来找，同时沿着B的prototype这条线来找，如果两条线能找到同一个引用，即同一个对象，那么就返回true。如果找到终点还未重合，则返回false。 instanceof表示的就是一种继承关系，或者原型链的结构
继承 OR 原型链 javascript中的继承是通过原型链来体现的 访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着proto这条链向上找，这就是原型链。
那么我们在实际应用中如何区分一个属性到底是基本的还是从原型中找到的呢？大家可能都知道答案了——hasOwnProperty，特别是在for…in…循环中，一定要注意。  Q：f1的这个hasOwnProperty哪里来？
 </description>
    </item>
    
    <item>
      <title>js面试—数组</title>
      <link>https://iseekto.github.io/trysme/2020/js%E9%9D%A2%E8%AF%95%E6%95%B0%E7%BB%84/</link>
      <pubDate>Fri, 17 Jan 2020 15:33:22 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/js%E9%9D%A2%E8%AF%95%E6%95%B0%E7%BB%84/</guid>
      <description> 一、铺平数组 给定原数组：let moreArr = [1, 2, [3, 4], [33, [442]], 5];
1、moreArr = [...moreArr] 2、moreArr = moreArr.flat(Infinity) 3、while(moreArr.some(Array.isArray)) { moreArr = [].concat(...moreArr) } 4、let flatArr = []; function flats(arr = []) { arr.forEach(v =&amp;gt; { if (Array.isArray(v)) { flats(v) } else { flatArr.push(v) } }) }  </description>
    </item>
    
  </channel>
</rss>