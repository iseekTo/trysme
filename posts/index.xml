<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on wm&#39;s blog</title>
    <link>https://iseekto.github.io/trysme/posts/</link>
    <description>Recent content in Posts on wm&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 May 2020 14:27:31 +0800</lastBuildDate>
    
	<atom:link href="https://iseekto.github.io/trysme/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Wrk压测工具</title>
      <link>https://iseekto.github.io/trysme/2020/wrk%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sun, 10 May 2020 14:27:31 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/wrk%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/</guid>
      <description>基本使用: wrk -t8 -c200 -d30s http://localhost:3000/test
命令行选项 -c, --connections: 总的http并发数 -d, --duration: 持续压测时间, 比如: 2s, 2m, 2h -t, --threads: 总线程数 -s, --script: -H, --header: 添加http header, 比如. &amp;quot;User-Agent: wrk&amp;quot; --latency: 在控制台打印出延迟统计情况 --timeout: http超时时间  运行结果 # wrk -t8 -c200 -d30s http://localhost:3000/test Running 30s test @ http://localhost:3000/test 8 threads and 200 connections Thread Stats Avg Stdev Max +/- Stdev Latency 933.40ms 588.82ms 2.00s 56.50% Req/Sec 15.05 15.87 180.00 92.63% 1012 requests in 30.</description>
    </item>
    
    <item>
      <title>在React中更好的集成TypeScript</title>
      <link>https://iseekto.github.io/trysme/2020/%E5%9C%A8react%E4%B8%AD%E6%9B%B4%E5%A5%BD%E7%9A%84%E9%9B%86%E6%88%90typescript/</link>
      <pubDate>Sat, 25 Apr 2020 21:40:44 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/%E5%9C%A8react%E4%B8%AD%E6%9B%B4%E5%A5%BD%E7%9A%84%E9%9B%86%E6%88%90typescript/</guid>
      <description>定义一个公共类组件的 props 和 state类型
import React, { Component, ComponentProps } from &#39;react&#39; type IProps = { initalNum: number } type IState = { username: string | null } class GlobalType extends Component&amp;lt;IProps, IState&amp;gt; { static defaultProps = { initalNum: 0 } }   在React中使用TS需要注意的几点：
1. .jsx文件都需要变为 .tsx
2. 使用class组件时必须要写 props和state的类型声明(以此代替了propTypes)
3. 需要定义全局变量时，在根目录的 global.d.ts 里写，使用时无需引入
4. 接口，其他类型声明在types/**.ts里写，统一规范化
class组件类型  React.ComponentProps: 获取指定组件的props类型
 type getGlobalTypesForProps = ComponentProps&amp;lt;typeof GlobalType&amp;gt;
  React.</description>
    </item>
    
    <item>
      <title>Ts React</title>
      <link>https://iseekto.github.io/trysme/2020/ts-react/</link>
      <pubDate>Fri, 24 Apr 2020 16:54:22 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/ts-react/</guid>
      <description>注释写好，同事烧香；不写注释，当场去世
 withRouter类型集成 // 引入函数及类型 import { withRouter, RouteComponentProps } from &#39;react-router&#39; // 定义组件内的props类型 type IEmptyCommanyProps = Readonly&amp;lt;{ onClick: () =&amp;gt; void }&amp;gt; &amp;amp; RouteComponentProps // 如果不需要props 但组件报错 type Iprops = {} &amp;amp; RouteComponentProps // 然后就可以愉快的跳转了~ [转圈]  axios集成返回体 import axios, { AxiosResponse, AxiosRequestConfig } from &#39;axios&#39; // 我这里后端返回的字段都有一个 message 所以我把它加上去！🥶 interface ReWriteAxiosResponseType extends AxiosResponse { message?: string } // 定义一个通用请求 🔥 const request(options: AxiosRequestConfig): Promise&amp;lt;ReWriteAxiosResponseType&amp;gt; { return axios.</description>
    </item>
    
    <item>
      <title>性能优化</title>
      <link>https://iseekto.github.io/trysme/2020/x-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 20 Apr 2020 17:49:53 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/x-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>网络  CDN缓存  核心包(react/&amp;amp;-dom)一律走缓存  HTTP缓存
 Cache-Control(强缓存，设置过期时间)  max-age=xxx，public  客户端在xxx秒内，如果有该资源的请求，直接读取缓存(200 from cache)  max-age=xxx, private  只让客户端缓存资源，代理服务器不缓存  max-age=xxx, immutable  强缓存，资源永不过期，用户强刷也不会去请求服务器，  max-age=xxx, no-cache  跳过强缓存，不影响设置协商缓存，每次请求都会询问服务端  max-age=xxx, no-store  不缓存，客户端，服务端都不缓存，也就没有强缓存与协商缓存。   Expires(资源的过期时间) Etag(协商缓存，资源文件唯一hash)  每个资源文件都有一个etag选项，并且每个文件都是唯一的hash值(打包加上hash选项)  LastModified(协商缓存，文件的修改时间&amp;lt;秒&amp;gt;)  客户端发起请求&amp;ndash;&amp;gt;看资源是否过期&amp;ndash;&amp;gt;过期&amp;ndash;&amp;gt;请求服务器&amp;ndash;&amp;gt;服务器对比资源是否真的过期&amp;ndash;&amp;gt;没过期&amp;ndash;&amp;gt;返回304状态码&amp;ndash;&amp;gt;客户端用缓存的老资源    如何设置？ nodejs -&amp;gt; setHeader; nginx -&amp;gt; add_header;
  项目构建  Service Worker缓存(可选)  缓存字体，图像等  GZIP压缩  webpack -&amp;gt; compression-webpack-plugin  样式/文件合并  CSS/JS 合并打包  memory-cache  对于一成不变的接口内容(tree组件，组织架构树)，可进行缓存。  动画  使用 requestAnimationFrame 代替 setInterval  ARMS监控  通过监控应用 找到项目错误率较多的点   ECMA提案  最新的ECMA 2020草案中有一项是 dynamic import，他在运行时才定义，</description>
    </item>
    
    <item>
      <title>Git Rebase简单使用</title>
      <link>https://iseekto.github.io/trysme/2020/git-rebase%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 15 Apr 2020 10:36:02 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/git-rebase%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>多个commit合成一个并提交远程  git log 选清楚要合并的commit id，从早提交的一个开始算起，到你想合并的commit区间
 git rebase -i HEAD~3 (或者你的commit id 区间)
 此时弹出一个vim交互页面，如果commit过多，则底部输入指令 %s/pick/s/g
 指令解释: 批量替换，将pick字节的改为squash(简写s), g全部 有一个需要改一下，在command处的我们把它给还原即可
  执行完毕如果又出现，successfully updated&amp;hellip; 然后会出现一个无序数字字母组成的分支名
 执行 git checkout -b new branch git add . git commit -m &#39;some msg&#39; git push 可选，多余分支删掉即可。
  去掉上一次的提交 git reset HEAD^ 或者 commitid</description>
    </item>
    
    <item>
      <title>微信内置浏览器缓存问题</title>
      <link>https://iseekto.github.io/trysme/2020/%E5%BE%AE%E4%BF%A1%E5%86%85%E7%BD%AE%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 20 Mar 2020 13:26:39 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/%E5%BE%AE%E4%BF%A1%E5%86%85%E7%BD%AE%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tree命令</title>
      <link>https://iseekto.github.io/trysme/2020/tree%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 20 Mar 2020 10:49:09 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/tree%E5%91%BD%E4%BB%A4/</guid>
      <description>tree 显示当前全部目录及全部子文件
例如：
├── README.md
├── config
│ ├── env.js
│ ├── getHttpsConfig.js
│ ├── jest
│ │ ├── cssTransform.js
│ │ └── fileTransform.js
│ ├── modules.js
│ ├── paths.js
│ ├── pnpTs.js
│ ├── webpack.config.js
│ └── webpackDevServer.config.js
├── package.json
├── public
│ ├── favicon.ico
│ ├── index.html
│ ├── logo192.png
│ ├── logo512.png
│ ├── manifest.json
│ └── robots.txt
├── scripts
│ ├── build.js
│ ├── start.js
│ └── test.</description>
    </item>
    
    <item>
      <title>Ts项目与webpack配置路径别名</title>
      <link>https://iseekto.github.io/trysme/2020/ts%E9%A1%B9%E7%9B%AE%E4%B8%8Ewebpack%E9%85%8D%E7%BD%AE%E8%B7%AF%E5%BE%84%E5%88%AB%E5%90%8D/</link>
      <pubDate>Wed, 18 Mar 2020 13:49:32 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/ts%E9%A1%B9%E7%9B%AE%E4%B8%8Ewebpack%E9%85%8D%E7%BD%AE%E8%B7%AF%E5%BE%84%E5%88%AB%E5%90%8D/</guid>
      <description>webpack与ts项目配置路径别名的问题 1、can not find xxx module
解决方案：
// 1、首先安装 awesome-typescript-loader cnpm i awesome-typescript-loader -S // 2、webpack.config.js const { TsConfigPathsPlugin } = require(&#39;awesome-typescript-loader&#39;); resolve: { plugins: [ new TsConfigPathsPlugin() ] } // 3、tsconfig.json { &amp;quot;compilerOptions&amp;quot;: { ... &amp;quot;rootDir&amp;quot;: &amp;quot;.&amp;quot;, &amp;quot;paths&amp;quot;: { &amp;quot;@src/*&amp;quot;: [ &amp;quot;src/lib/*&amp;quot; ], &amp;quot;@util/*&amp;quot;: [ &amp;quot;src/util/*&amp;quot; ] } } }  配置成功后 如下图所示，已经显示了我们配置的两个路径别名！ 详情资料请前往 TS中文网&amp;ndash;模块解析</description>
    </item>
    
    <item>
      <title>Ngnix刷新404</title>
      <link>https://iseekto.github.io/trysme/2020/ngnix%E5%88%B7%E6%96%B0404/</link>
      <pubDate>Mon, 09 Mar 2020 20:10:29 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/ngnix%E5%88%B7%E6%96%B0404/</guid>
      <description> 前端项目刷新404 解决：在项目的nginx配置文件里加入
location / { try_files $uri $uri/ /index.html; }  </description>
    </item>
    
    <item>
      <title>Pm2使用</title>
      <link>https://iseekto.github.io/trysme/2020/pm2%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 28 Feb 2020 11:25:01 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/pm2%E4%BD%BF%E7%94%A8/</guid>
      <description>安装: npm i pm2 -g
查看版本：pm2 --version
启动：pm2 start index.js 监听文件启动：pm2 start index.js --watch
查看启动历史：pm2 list
停止：pm2 stop &amp;lt;AppName&amp;gt;/&amp;lt;id&amp;gt;
全部停止： pm2 stop all
删除进程：pm2 delete &amp;lt;id&amp;gt;
 pm2 常用配置
 根目录下，新建空文件 /logs/err.log 和 /logs/out.log 新建配置文件 pm2.conf.json
// pm2.conf.json： { &amp;quot;apps&amp;quot;: { &amp;quot;name&amp;quot;: &amp;quot;pm2-test-server&amp;quot;, // 起个进程名，即AppName &amp;quot;script&amp;quot;: &amp;quot;index.js&amp;quot;, // 启动的入口文件（koa2项目中为/bin/www.js） &amp;quot;watch&amp;quot;: true, // 监听文件变化，自动重启 &amp;quot;ignore_watch&amp;quot;: [ // 不需要监听的文件 &amp;quot;node_modules&amp;quot;, &amp;quot;logs&amp;quot; ], &amp;quot;instances&amp;quot;: 4, // 设置多进程 &amp;quot;error_file&amp;quot;: &amp;quot;logs/err.log&amp;quot;, // 错误日志存储的文件 &amp;quot;out_file&amp;quot;: &amp;quot;logs/out.log&amp;quot;, // console.</description>
    </item>
    
    <item>
      <title>Git冷门指令</title>
      <link>https://iseekto.github.io/trysme/2020/git%E5%86%B7%E9%97%A8%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Thu, 27 Feb 2020 17:08:38 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/git%E5%86%B7%E9%97%A8%E6%8C%87%E4%BB%A4/</guid>
      <description>项目权限问题 对项目进行权限提升，导致没有更改的文件全部变成待提交状态，
在根项目: git config core.filemode false
代码库远程迁移后，修改本地代码关联的远程地址: git remote set-url origin your resp address
复制指定commit号的内容 ✨ git cherry-pick commitID
提交日志图化，是否平行提交 ✨ git log --oneline --graph</description>
    </item>
    
    <item>
      <title>Charles在app中抓包乱码问题的解决</title>
      <link>https://iseekto.github.io/trysme/2020/charles%E5%9C%A8app%E4%B8%AD%E6%8A%93%E5%8C%85%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Thu, 27 Feb 2020 09:47:56 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/charles%E5%9C%A8app%E4%B8%AD%E6%8A%93%E5%8C%85%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</guid>
      <description>Charles在抓取https协议的内容时会出现乱码
解决方案：
1、在菜单栏中找到 Proxy -&amp;gt; SSL Proxying Settings
2、在弹窗框中的 SSL Proxying 选项卡内的 Include 下方点击 Add
3、什么都不填，默认所有域名都可捕获
4、点击 ok 数据就正常显示了~</description>
    </item>
    
    <item>
      <title>Mongodb相关问题</title>
      <link>https://iseekto.github.io/trysme/2020/mongodb%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 25 Feb 2020 17:06:47 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/mongodb%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
      <description>此处不讲本地mongodb的连接, 主环境在宝塔面板中进行
 基本步骤 1、点击ssh终端进行命令行交互
2、输入 mongo
3、切换 admin 数据库，输入：use admin
4、 给 admin 设置密码
添加用户密码 db.createUser({ user: &amp;quot;自定义名&amp;quot;, // db,getUsers(user) pwd: &amp;quot;密码&amp;quot;, roles:[ { role: &amp;quot;userAdmin&amp;quot;, // 权限 db: &amp;quot;数据库名字&amp;quot; // 要对应 数据库列表中的某一个，查看数据库列表 show dbs } ] })  5、验证是否添加成功，db.auth(用户名，用户密码)，如果返回 ‘1’表示验证成功， 如果是 ‘0’ 表示验证失败
刚才是给 admin 添加的权限，现在可以给别的数据库加
 宝塔mongodb配置修改  bindIp 修改为 0.0.0.0 允许外网访问 authorization 修改为 enabled 开启认证   createUser中的 role 字段解释  MongoDB 目前内置了 7 个角色。  数据库用户角色：read、readWrite; 数据库管理角色：dbAdmin、dbOwner、userAdmin； 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； 备份恢复角色：backup、restore； 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase 超级用户角色：root；这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase） 内部角色：__system  这些角色对应的作用如下：  Read：允许用户读取指定数据库 readWrite：允许用户读写指定数据库 dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.</description>
    </item>
    
    <item>
      <title>Taro注意事项</title>
      <link>https://iseekto.github.io/trysme/2020/taro%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Tue, 25 Feb 2020 14:41:37 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/taro%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description> 路由无法跳转的相关问题 版本问题：升级taro版本，项目中的@tarojs相关版本，nervjs版本&amp;lt;版本必须保持一致&amp;gt;
设置页面标题优先级 config.navigationBarTitleText &amp;gt; Taro.setNavigationBarTitle  上传图片 使用Taro.uploadFile Taro.uploadFile({ url: `//${getEnv()}xxx.xxx.com/base/v1/upload`, name: &#39;file&#39;, filePath: files[0].url, formData, }).then(res =&amp;gt; console.log(res))  canvas清除画笔 清除画笔使用 ctx.draw(); ctx.beginPath()
输出图片使用 Taro.canvasToTempFilePath()
预览图片功能  在新页面中全屏预览图片。预览的过程中用户可以进行保存图片、发送给朋友等操作。
Taro.previewImage({ current: &#39;urls[0]&#39;, // 当前显示图片链接 urls: imgList // 需要预览的图片链接列表 })   </description>
    </item>
    
    <item>
      <title>如何正确使用React Hooks</title>
      <link>https://iseekto.github.io/trysme/2020/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8react-hooks/</link>
      <pubDate>Tue, 25 Feb 2020 14:08:13 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8react-hooks/</guid>
      <description>本文转自 https://zhuanlan.zhihu.com/p/85969406
 从 React Hooks 正式发布到现在，我一直在项目使用它。但是，在使用 Hooks 的过程中，我也进入了一些误区，导致写出来的代码隐藏 bug 并且难以维护。这篇文章中，我会具体分析这些问题，并总结一些好的实践，以供大家参考。
问题一：我该使用单个 state 变量还是多个 state 变量？ useState 的出现，让我们可以使用多个 state 变量来保存 state，比如：
const [width, setWidth] = useState(100); const [height, setHeight] = useState(100); const [left, setLeft] = useState(0); const [top, setTop] = useState(0);  但同时，我们也可以像 Class 组件的 this.state 一样，将所有的 state 放到一个 object 中，这样只需一个 state 变量即可：
const [state, setState] = useState({ width: 100, height: 100, left: 0, top: 0 });  那么问题来了，到底该用单个 state 变量还是多个 state 变量呢？</description>
    </item>
    
    <item>
      <title>Yarn安装项目遇到的难点</title>
      <link>https://iseekto.github.io/trysme/2020/yarn%E5%AE%89%E8%A3%85%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%BE%E7%82%B9/</link>
      <pubDate>Sat, 22 Feb 2020 19:12:57 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/yarn%E5%AE%89%E8%A3%85%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%9A%BE%E7%82%B9/</guid>
      <description>create-react-app创建项目报错（冷门错误） 错误日志：The engine &amp;ldquo;node&amp;rdquo; is incompatible with this module
解决方案：yarn config set ignore-engines true</description>
    </item>
    
    <item>
      <title>Js工具函数</title>
      <link>https://iseekto.github.io/trysme/2020/js%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 21 Feb 2020 14:11:45 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/js%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</guid>
      <description> 快速获取url地址栏的参数(对象格式) const locationParams = location.search.slice(1) locationParams.split(&#39;&amp;amp;&#39;).reduce((acc, params) =&amp;gt; { const [key, value] = params.split(&#39;=&#39;) return { ...acc, [key]: value } }, {})  </description>
    </item>
    
    <item>
      <title>Linux常用命令</title>
      <link>https://iseekto.github.io/trysme/2020/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 16 Feb 2020 17:41:37 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>查看文件及目录下子及的大小 1、最简单的查看方法可以使用 ls -ll、ls-lh命令进行查看，使用 ls -ll，会显示成字节大小; ls- lh会以KB、MB等为单位进行显示，这样比较直观一些。
2、通过命令 du -h –-max-depth=1 *，可以查看当前目录下各文件、文件夹的大小，这个比较实用。
3、查询当前目录总大小可以使用 du -sh。
4、只想查看指定目录的总大小，可以使用 du -sh 目录名称，好用。
端口是否占用 查找系统所示正在使用的端口列表 netstat -lntp
查找监听端口号的进程 PID lsof -i :3000
杀死对应进程 PID, 如 13459 kill -9 13459
防火墙相关 查看防火墙服务有没有运行 firewall-cmd --state
打开/关闭防火墙 systemctl start/stop firewalld
查看防火墙开放的端口 firewall-cmd --list-port
重启防火墙服务使新配置生效 systemctl restart firewalld
目录/可执行文件权限 可执行文件(例如.sh脚本) 赋予脚本可执行权限，终端输入命令：chmod +x t1.sh 回车
执行 ./t1.sh
！设置某目录最高权限 chmod 777 your Catalog
！将当前目录下的所有文件及子目录的文件拥有者权限设置为读、写、可执行 chmod -R 777 *: *： 通配符，指当前目录下的所有文件及目录</description>
    </item>
    
    <item>
      <title>React Hook持久化引用方案</title>
      <link>https://iseekto.github.io/trysme/2020/react-hook%E6%8C%81%E4%B9%85%E5%8C%96%E5%BC%95%E7%94%A8%E6%96%B9%E6%A1%88/</link>
      <pubDate>Wed, 05 Feb 2020 21:57:03 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/react-hook%E6%8C%81%E4%B9%85%E5%8C%96%E5%BC%95%E7%94%A8%E6%96%B9%E6%A1%88/</guid>
      <description> 使用 useRef 作为持久化引用 import { useRef, useEffect } from &#39;react&#39; type strOrNum = number | string const usePreviousValue = (value: strOrNum) =&amp;gt; { // 增加一个长久引用的变量 ref const ref = useRef() as any // 在useEffect钩子里传递值 useEffect(() =&amp;gt; { ref.current = value }) return ref.current } export default usePreviousValue  </description>
    </item>
    
    <item>
      <title>JS原型与闭包系列之——prototype原型</title>
      <link>https://iseekto.github.io/trysme/2020/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97%E4%B9%8Bprototype%E5%8E%9F%E5%9E%8B/</link>
      <pubDate>Mon, 27 Jan 2020 20:41:43 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E9%97%AD%E5%8C%85%E7%B3%BB%E5%88%97%E4%B9%8Bprototype%E5%8E%9F%E5%9E%8B/</guid>
      <description> prototype原型 函数也是一种对象。他也是属性的集合，也可以对函数进行自定义属性。
每个函数都有一个属性叫做prototype。
这个prototype的属性值是一个对象（属性的集合，再次强调！），默认的只有一个叫做constructor的属性，指向这个函数本身。
Fn是一个函数，fn对象是从Fn函数new出来的，这样fn对象就可以调用Fn.prototype中的属性。 因为每个对象都有一个隐藏的属性——“proto”，这个属性引用了创建这个对象的函数的prototype。
即：fn.__proto__ === Fn.prototype
隐式原型 每个对象都有一个proto，可成为隐式原型 proto是一个隐藏的属性，javascript不希望开发者用到这个属性值，有的低版本浏览器甚至不支持这个属性值 instanceof Instanceof的判断队则是：沿着A的proto这条线来找，同时沿着B的prototype这条线来找，如果两条线能找到同一个引用，即同一个对象，那么就返回true。如果找到终点还未重合，则返回false。 instanceof表示的就是一种继承关系，或者原型链的结构
继承 OR 原型链 javascript中的继承是通过原型链来体现的 访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着proto这条链向上找，这就是原型链。
那么我们在实际应用中如何区分一个属性到底是基本的还是从原型中找到的呢？大家可能都知道答案了——hasOwnProperty，特别是在for…in…循环中，一定要注意。  Q：f1的这个hasOwnProperty哪里来？
 </description>
    </item>
    
    <item>
      <title>Node资源</title>
      <link>https://iseekto.github.io/trysme/2020/node%E8%B5%84%E6%BA%90/</link>
      <pubDate>Mon, 27 Jan 2020 20:34:10 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/node%E8%B5%84%E6%BA%90/</guid>
      <description>nodejs不同版本的下载
 mac系统的同学建议下载相关版本的 msi
 </description>
    </item>
    
    <item>
      <title>Create React App运行报错解决方案</title>
      <link>https://iseekto.github.io/trysme/2020/create-react-app%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 27 Jan 2020 20:28:16 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/create-react-app%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>排除webpack，以及相关依赖包/版本的错误
 根目录下创建一个 .env 文件
添加 SKIP_PREFLIGHT_CHECK=true
运行 npm start</description>
    </item>
    
    <item>
      <title>TsUtil</title>
      <link>https://iseekto.github.io/trysme/2020/ts_util/</link>
      <pubDate>Thu, 23 Jan 2020 21:40:38 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/ts_util/</guid>
      <description>Talk is cheap，Show me your code.
 类型封装，字符串、数组、正则、纯对象&amp;hellip; // 类型辅助函数 const typeToString = &amp;lt;T&amp;gt;(type: T) =&amp;gt; { return Object.prototype.toString.call(type).slice(8, -1) } /** * 这里不直接写返回 boolean的原因是函数多用于条件判断， * 如果是字符串，则... 如果是数字，则... * 然而在ts运行环境中，除非写泛型，或者多返回值，不然就会出现报错，无法精确具体类型。 */ const isString = (str: any): str is string =&amp;gt; typeof str === &#39;string&#39; const isNumber = (num: any): num is string =&amp;gt; typeof num === &#39;number&#39; const isRegExp = (reg: any): reg is RegExp =&amp;gt; typeToString(reg) === &#39;RegExp&#39; const isFunction = (func: any): func is Function =&amp;gt; typeof func === &#39;function&#39; const isObject = (obj: any): obj is Object =&amp;gt; typeof obj === &#39;object&#39; // waiting problem const isArray = Array.</description>
    </item>
    
    <item>
      <title>Ts常见问题总结</title>
      <link>https://iseekto.github.io/trysme/2020/ts%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 21 Jan 2020 20:36:06 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/ts%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
      <description>1、从一组数组对象中拿到相应值，组成枚举类型 const littleNumbers = [ { a: 1, b: &#39;123&#39; }, { a: 2, b: &#39;22223&#39; }, { a: 3, b: &#39;3123&#39; }, ] as const; // remember &#39;as const&#39; // littleNumbers[number] 相当于下标 type aLittle = typeof littleNumbers[number][&#39;b&#39;] // aLittle = &#39;123&#39; | &#39;22223&#39; | &#39;3123&#39; let useLittles: aLittle = &#39;3123&#39;  2、找不到第三方模块时，有两种方法可以消除ts的报警 // 1、在加载第三方模块内部声明 declare const yourModuleName: any; // 2、在根目录新建 modules.d.ts declare module &#39;yourModuleName&#39;;  3、根据key值，约束对应value的值类型 let source = { name: &#39;lisa&#39;, age: 19 } type typeSource = typeof source const getKey = &amp;lt;T extends keyof typeSource&amp;gt;( key: T, value: typeSource[T] ): typeSource[T] =&amp;gt; { return value } // error 类型“&amp;quot;123&amp;quot;”的参数不能赋给类型“number”的参数。ts(2345) let bingoAge = getKey(&#39;age&#39;, &#39;123&#39;) // is ok let bingoName = getKey(&#39;name&#39;, &#39;123&#39;)   持续更新中&amp;hellip;</description>
    </item>
    
    <item>
      <title>Css常用技巧</title>
      <link>https://iseekto.github.io/trysme/2020/css%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Tue, 21 Jan 2020 20:31:19 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/css%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>transition 闪屏问题 .css { -webkit-transform-style: preserve-3d; -webkit-backface-visibility: hidden; -webkit-perspective: 1000; }  开启硬件加速 .css { transform: translate3d(0, 0, 0); }  1px的问题 解决方案大致为两种：
1、使用css伪类加 transform: scale(0.5)
.box { width: 100px; padding: 10px; position: relative; background-color: white; } .box::after { content: &#39;&#39;; box-sizing: border-box; pointer-events: none; position: absolute; top: -50%; bottom: -50%; right: -50%; left: -50%; border: 0px solid red; transform: scale(.5); border-bottom-width: 1px; }  2、媒体查询根据不同尺寸进行相对缩放
极简弹窗动画 /* 进场动画 */ .</description>
    </item>
    
    <item>
      <title>Mac常用指令</title>
      <link>https://iseekto.github.io/trysme/2020/mac%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Sun, 19 Jan 2020 20:03:59 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/mac%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</guid>
      <description>查看本机ip grep：筛选的意思 筛选某个键 ifconfig | grep &amp;quot;inet&amp;quot;</description>
    </item>
    
    <item>
      <title>Ts代码片段</title>
      <link>https://iseekto.github.io/trysme/2020/ts%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</link>
      <pubDate>Fri, 17 Jan 2020 16:21:40 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/ts%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</guid>
      <description>interface定义函数 interface User { name: string age: number } // 定义单个函数，用type定义是个不错的选择 type UserFunc = (user: User) =&amp;gt; string const getUserInfo: UserFunc = (user) =&amp;gt; { return `name: ${user.name}，age: ${user.age}` } getUserInfo({ name: &#39;ff&#39;, age: 23 })  typeof 探查某个dom/关键字的类型 // 想知道某个dom，关键字(setTimeout)的类型是什么，可用typeof let div = document.createElement(&#39;div&#39;); // HTMLDivElement type divType = typeof div let timer = setTimeout(() =&amp;gt; console.log(&#39;st&#39;), 2) // NodeJS.Timeout type timerType = typeof timer  ts高级类型 // 剔除某个键 Omit let person = { name: &#39;name&#39;, hoppy: [&#39;eat&#39;, &#39;sleep&#39;] } type user = Omit&amp;lt;typeof person, &#39;name&#39;&amp;gt;   持续更新中&amp;hellip;</description>
    </item>
    
    <item>
      <title>常用插件</title>
      <link>https://iseekto.github.io/trysme/2020/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Fri, 17 Jan 2020 16:12:32 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</guid>
      <description> 生成二维码：使用 QRCode import QRCode from &#39;qrcode&#39;; const opt = {} const url = window.location.url try { console.log(await QRCode.toDataURL(url, opt)) } catch(err) { console.error(err) }  -- 生成图片：使用html2canvas import html2canvas from &#39;html2canvas&#39;; html2canvas(document.body).then(function(canvas) { document.body.appendChild(canvas); });  后续问题：  生成的有base64，但img区域空白 解决方案：  截图产生空白是因为容器高度设置的问题，设置windowHeight的高度等于页面包含滚动条的高度即可获取滚动条中的内容。这一条就可以解决空白的问题。 设置width、height属性的原因是，我们在页面中截图显示的区域宽度和高度是固定的，就是当前屏幕的可见区域。 设置x、y坐标的原因是由于页面在有滚动条的时候，需要指定截图的起始位置。本项目中x轴方向不存在滚动条，所以设置为零；y方向有滚动条，所以需要获取一下当前方向的滚动坐标。 一般网页中会有图片，图片中有链接地址时，设置useCORS属性可保证图片的加载。   </description>
    </item>
    
    <item>
      <title>js面试—数组</title>
      <link>https://iseekto.github.io/trysme/2020/js%E9%9D%A2%E8%AF%95%E6%95%B0%E7%BB%84/</link>
      <pubDate>Fri, 17 Jan 2020 15:33:22 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/js%E9%9D%A2%E8%AF%95%E6%95%B0%E7%BB%84/</guid>
      <description> 一、铺平数组 给定原数组：let moreArr = [1, 2, [3, 4], [33, [442]], 5];
1、moreArr = [...moreArr] 2、moreArr = moreArr.flat(Infinity) 3、while(moreArr.some(Array.isArray)) { moreArr = [].concat(...moreArr) } 4、let flatArr = []; function flats(arr = []) { arr.forEach(v =&amp;gt; { if (Array.isArray(v)) { flats(v) } else { flatArr.push(v) } }) }  </description>
    </item>
    
    <item>
      <title>Hugo简单使用</title>
      <link>https://iseekto.github.io/trysme/2020/hugo%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8/</link>
      <pubDate>Wed, 15 Jan 2020 23:37:32 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/hugo%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8/</guid>
      <description>Hugo简单使用流程 注：使用 hugo new posts/...md 之后，需要将 draft: true 这一行删掉。
文章写完后，且绑定github域名；
接着在项目根目录终端输入 hugo 他会在根目录下的 public 文件夹生成我们改动之后的代码
然后就是一波 git add -A, git commit ....
最后就可以在你的github上看效果吧！
 记坑，tags分页下404的问题：需要加上 trysme 作为链接标头 导航需要加入别的路由时可用到此招！
 </description>
    </item>
    
    <item>
      <title>React生命周期执行顺序</title>
      <link>https://iseekto.github.io/trysme/2020/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Wed, 15 Jan 2020 23:05:35 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</guid>
      <description> React生命周期执行顺序： ###################	渲染过程 ############### #constructor: ES6构造函数. 1.定义它是为了初始化state，这样我们可以在组件生命周期任何函数中访问state 1.其次是为了绑定成员函数的this环境、 #render：组件中最重要的函数，渲染DOM。 1.它返回一个JSX描述的结构，最终由react来操作渲染过程 2.如果组件的作用不是为了渲染页面，无东西可画，我们可以返回一个null或者false 3.不可再render中使用this.setState，因为一个纯函数不应该引起状态的改变。 #componentWillMount: 组件渲染前，将要装载时。 1.它执行完毕会走render函数 2.建议数据渲染不要放在这个函数里 3.一般都在里放loading，改变引用title等。 4.它可以在浏览器和服务器端被调用。 #componentDidMount: 组件挂载时 1.这里我们可以拿到DOM节点，动态赋予DOM事件 2.可以请求数据接口 3.它只能在浏览器端被调用，因为DOM已经挂载 4.可结合其他UI库执行代码。 ################## 更新过程 ################## 组件被挂载到DOM树上之后，当props或者state被更改的时候会依次执行以下生命周期函数 #componentWillReceiveProps 1.只要是父组件里的render函数被调用，在render函数里面#【被渲染的子组件也会经历更新过程】#； 不管父传给子组件的props有没有改变，都会触发子组件的componentWillReceiveProps函数 2.注意：this.setState()函数在更新的过程中不会触发这个函数； 因为它是根据props值，也就是参数nextProps来计算出是不是要更新内部state状态 3.触发之后会更新子组件的render函数 #shouldComponentUpdate: 性能优化利器-决定一个组件什么时候不需要渲染。 1.在更新过程中，react会首先调用shouldComponentUpdate函数，如果他返回true，继续更新 接下来调用render 反之，停止更新，也就不会引发后续的渲染。 2.通过this.setState()函数引发更新过程，而不是立即更新组件的state值，在执行到本周期函数时，this.state依 然是this.setState()函数执行前的值，我们要做的就是在nextProps, this.props, nextState, this.state中做对比。 #componentWillUpdate：组件更新前 1.如果shouldComponentUpdate函数返回true，react接下来就会调用组件的componentWillUpdate, render和componentDidUpdate函数。 2.使用React做服务端渲染时(SSR), 基本不会经历更新过程，因为服务端之产出一个HTML字符串。 ################## 卸载过程 ################## #componentWillUnMount: 组件卸载时 1.本周期函数与componentDidMount周期函数有关，用于移除DOM节点 2.清除定时器。 React生命周期走势大致是： constructor-&amp;gt;componentWillMount-&amp;gt;render-&amp;gt;componentDidMount-&amp;gt;!props更新调用-&amp;gt;(componentWillReceiveProps -&amp;gt; render) -&amp;gt;(shouldComponentUpdate ? true -&amp;gt; componentWillUpdate -&amp;gt; render -&amp;gt; componentDidUpdate : componentWillUnMount: 不会打印 默认执行了)  </description>
    </item>
    
    <item>
      <title>Makedown</title>
      <link>https://iseekto.github.io/trysme/2020/makedown/</link>
      <pubDate>Wed, 15 Jan 2020 18:28:14 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/makedown/</guid>
      <description>Table of Contents  1212 22 333   第一项：  第一项嵌套的第一个元素 第一项嵌套的第二个元素  深入嵌套   第二项：  第二项嵌套的第一个元素  深入嵌套&amp;ndash;二  第二项嵌套的第二个元素   cd rn项目 react-native run-ios 之后yarn start 打开手机模拟器即可显示。 换行？ 一行的结束敲两个空格就可以换行。
新增代码高亮效果 - let bs = undefined; + bs = 100  解读React Native https://www.jianshu.com/p/ff20064f7a7f
更换RN应用程序图标 在Xcode里双击项目工程 -&amp;gt; general-&amp;gt; App Icons Source将合成好的图片拉到 Images-1.xcassets下 重新启动 成功， 相关连接 https://www.jianshu.com/p/56562e5a9396 HTML block below  This blockquote will change based on the HTML settings above.</description>
    </item>
    
    <item>
      <title>iOS兼容问题</title>
      <link>https://iseekto.github.io/trysme/2020/ios%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 15 Jan 2020 18:26:38 +0800</pubDate>
      
      <guid>https://iseekto.github.io/trysme/2020/ios%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</guid>
      <description>前置条件：在不使用第三方封装好的ui库，比如跨端框架Taro。
 input兼容问题 1、掉起输入框英文键盘，第一个字母为大写的问题
&amp;lt;input type=&amp;quot;text&amp;quot; autocapitalize=&amp;quot;off&amp;quot; /&amp;gt; 
2、在靠近底部触发input输入框，输入完成后，页面底部留白问题
注册blur事件及定时器变量方便下一个focus时清除此使用，使用document.scrollIntoView()，然后在加上window.scrollTo(0, document.body.scrollHeight) 来重置高度
3、获取焦点时，光标错位
加上如下css样式user-select: text 如下js input.target.scrollIntoView(true)
4、输入框获取焦点时，页面输入框被覆盖，定位的元素位置错乱
可能性：当input位于fixed底部时，输入法弹出后，fixed会失效，页面的定位元素也会乱
方案一：使用原生 API scrollIntoView(true) focus时，定时器 setTimeout(() =&amp;gt; input.target.scrollIntoView(true), 200)
方案二：focus时，改变自身定位及其他定位保持位置不变，blur时恢复。
点击300ms穿透 建议方案：
1、引入fastclick cdn文件，或者npm i fastclick, 再注册fastClick实例
2、将click事件注册为touchstart事件立即执行
iOS 的 webview 中 滑动不流畅 ios5.0及以后的版本里，滑动有定义两个值，一个是auto，一个是touch
-webkit-overflow-scrolling: touch : 当手指从触摸屏上离开，会保持一段时间的滚动
-webkit-overflow-scrolling: auto: 当手指从触摸屏上离开，滚动会立即停止
在滚动容器上增加滚动touch方法，可能会导致的问题是 含有fixed的元素会随着页面一起滚动，解决方案；在
body: { ​ overflow-y: hidden; } .box { ​ overflow-y: auto; ​ -webkit-overflow-scrolling: touch; }  iOS上拉边界与下拉会出现白色空白区域 产生原因: 在 iOS 中，手指按住屏幕上下拖动，会触发 touchmove 事件。这个事件触发的对象是整个 webview 容器，容器自然会被拖动，剩下的部分会成空白</description>
    </item>
    
    <item>
      <title></title>
      <link>https://iseekto.github.io/trysme/1/css%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://iseekto.github.io/trysme/1/css%E6%8A%80%E5%B7%A7/</guid>
      <description>title: &amp;ldquo;Css技巧&amp;rdquo; date: 2020-03-27T13:52:48+08:00 categories: [&amp;lsquo;css&amp;rsquo;]
tags: [&amp;lsquo;css&amp;rsquo;] select内容居中显示、下拉内容右对齐 select { text-align: center; text-align-last: center; } select option { direction: rtl; }  修改input输入框中光标的颜色不改变字体的颜色 input { color: #fff; caret-color: red; }  修改input 输入框中 placeholder 默认字体样式 /* webkit内核的浏览器 */ input::-webkit-input-placeholder { color: #c2c6ce; } /* Firefox版本4-18 */ input:-moz-placeholder { color: #c2c6ce; } /* Firefox版本19+ */ input::-moz-placeholder { color: #c2c6ce; } /* IE浏览器 */ input:-ms-input-placeholder { color: #c2c6ce; }  transfrom的rotate属性在span标签下失效 span { display: inline-block; }  cursor属性 .</description>
    </item>
    
  </channel>
</rss>